#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('gserver:server');
const http = require('http');
const models = require('../models');


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

function initBank() {
    return new Promise((resolve, reject) => {
        models.BANKS_TB.findAndCountAll({logging: false})
            .then(result => {
                if (result.count === 0) {
                    const csv = require('csvtojson');
                    const csvFilePath = __dirname + '/../config/banks_data.csv';
                    csv()
                        .fromFile(csvFilePath)
                        .on('end_parsed', (users) => {
                            models.BANKS_TB.bulkCreate(users, {logging: false})
                                .catch(err => {
                                    console.log('This is err : ', err);
                                    reject(err);
                                });
                            console.log('Bank Data init Complete');
                            resolve();
                        })
                }
            });
        resolve();
    })
}

function initUser() {
    return new Promise((resolve, reject) => {
        models.USERS_TB.findAndCountAll({logging: false})
            .then(result => {
                if (result.count === 0) {
                    const csv = require('csvtojson');
                    const csvFilePath = __dirname + '/../config/users_data.csv';
                    csv()
                        .fromFile(csvFilePath)
                        .on('end_parsed', (users) => {
                            models.USERS_TB.bulkCreate(users, {logging: false})
                                .catch(err => {
                                    console.log('USER ERROR : ', err);
                                    reject(err)
                                });
                            console.log('User Data init Complete');
                            resolve();
                        })
                }
            });
        resolve();
    })
}

function initStation() {
    return new Promise((resolve, reject) => {
        models.STATIONS_TB.findAndCountAll({logging: false})
            .then(result => {
                if (result.count === 0) {
                    let data = [];
                    const csv = require('csvtojson');
                    const csvFilePath = __dirname + '/../config/stations_data.csv';
                    csv()
                        .fromFile(csvFilePath)
                        .on('json', parsed => {
                            // check duplication
                            let index = data.findIndex(station => {
                                return station.stationName === parsed.이름
                            });
                            if (index >= 0) {
                                data[index].stationLines.push(getStationName(parsed.호선));
                                data[index].stationLines.sort();
                            } else {
                                // Not duplicate, have location values case
                                if (parsed.이름 && parsed.X && parsed.Y) {
                                    let newStation = {};
                                    newStation.stationName = parsed.이름;
                                    newStation.stationLines = [getStationName(parsed.호선)];
                                    newStation.stationLocation = {type: 'Point', coordinates: [parsed.X, parsed.Y]};
                                    data.push(newStation);
                                }
                            }
                        })
                        .on('end_parsed', () => {
                            data.forEach(station => {
                                station.stationLines = station.stationLines.toString();
                            });
                            models.STATIONS_TB.bulkCreate(data, {logging: false})
                                .then(() => {
                                    console.log('Station Data init Complete');
                                    resolve();
                                }).catch((err) => {
                                console.log('THE ERROR : ' + err);
                                reject(err);
                            })
                        });
                }

            });
        resolve();
    })
}

function initErrand() {
    return new Promise((resolve, reject) => {
        models.ERRANDS_TB.findAndCountAll({logging: false})
            .then(async result => {
                if (result.count === 0) {
                    const csv = require('csvtojson');
                    const csvFilePath = __dirname + '/../config/errands_data.csv';
                    csv()
                        .fromFile(csvFilePath)
                        .on('end_parsed', async (errands) => {
                            let stations = await models.STATIONS_TB.findAll({logging: false});
                            let idxStaion = [];
                            stations.forEach(station => {
                                idxStaion.push(station.dataValues);
                            });
                            await errands.forEach(errand => {
                                let idx = idxStaion.find((station) => {
                                    return station.stationName === errand.startStationIdx
                                });
                                errand.startStationIdx = idx.stationIdx;
                                idx = idxStaion.find((station) => {
                                    return station.stationName === errand.arrivalStationIdx
                                });
                                errand.arrivalStationIdx = idx.stationIdx;
                                errand.requesterIdx = errand.requesterIdx ? parseInt(errand.requesterIdx) : null;
                                errand.executorIdx = errand.executorIdx ? parseInt(errand.executorIdx) : null;
                            });
                            models.ERRANDS_TB.bulkCreate(errands, {logging: false})
                                .then(() => {
                                    console.log('Errands Data init Complete');
                                    resolve();
                                })
                                .catch((err) => {
                                    console.log(err);
                                    reject(err);
                                })
                        });
                }
            });
        resolve();
    })
}

function getStationName(name) {
    switch (name) {
        case 'A' :
            return '공항';
        case 'B' :
            return '분당';
        case 'E' :
            return '에버';
        case 'G' :
            return '경춘';
        case 'I' :
            return '인천1';
        case 'I2' :
            return '인천2';
        case 'K' :
            return '경의중앙';
        case 'KK' :
            return '경강';
        case 'S' :
            return '신분당선';
        case 'SU' :
            return '수인';
        case 'U' :
            return '의정';
        default :
            return name;
    }
}

// function initCancel() {
//     return new Promise((resolve, reject) => {
//         models.CANCEL_TB.findAndCountAll({logging: false})
//             .then(result => {
//                 if(result.count === 0){
//                     const csv = require('csvtojson');
//                     const csvFilePath = __dirname + '/../config/cancel_data.csv';
//                     csv()
//                         .fromFile(csvFilePath)
//                         .on('end_parsed', (cancels) => {
//                             models.CANCEL_TB.bulkCreate(cancels, {logging:false})
//                                 .catch(err => {
//                                     console.log('This is err : ', err);
//                                     reject(err);
//                                 });
//                             console.log('Cancel Data init Complete');
//                             resolve();
//                         })
//                 }
//             })
//     })
// }

// sync with Initializing Dummy Datas
models.sequelize.sync().then(async () => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    console.log('Sync complete');
    try {
        await initBank();
        await initUser();
        await initStation();
        await initErrand();
        // await initCancel();
    } catch (err) {
        console.log(err.message);
    }
});

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}